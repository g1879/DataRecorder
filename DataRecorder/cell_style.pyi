# -*- coding:utf-8 -*-
from typing import Literal, Optional, Any, Union

from openpyxl.cell import Cell
from openpyxl.styles import Alignment, Font, Border, Fill, NumberFormatDescriptor, Protection, Side

LINES = Literal['dashDot', 'dashDotDot', 'dashed', 'dotted', 'double', 'hair', 'medium', 'mediumDashDot',
'mediumDashDotDot', 'mediumDashed', 'slantDashDot', 'thick', 'thin', None]


class CellStyle(object):
    font_args: tuple = ...
    border_args: tuple = ...
    alignment_args: tuple = ...
    protection_args: tuple = ...
    gradient_fill_args: tuple = ...
    pattern_fill_args: tuple = ...

    def __init__(self) -> None:
        self._font: Optional[CellFont] = ...
        self._border: Optional[CellBorder] = ...
        self._pattern_fill: Optional[CellPatternFill] = ...
        self._gradient_fill: Optional[CellGradientFill] = ...
        self._number_format = ...
        self._protection: Optional[CellProtection] = ...
        self._alignment: Optional[CellAlignment] = ...

    @property
    def font(self) -> CellFont: ...

    @property
    def border(self) -> CellBorder: ...

    @property
    def alignment(self) -> CellAlignment: ...

    @property
    def pattern_fill(self) -> CellPatternFill: ...

    @property
    def gradient_fill(self) -> CellGradientFill: ...

    @property
    def CellNumFormat(self) -> CellNumberFormat: ...

    @property
    def protection(self) -> CellProtection: ...

    def to_cell(self, cell: Cell) -> None: ...


def _handle_args(args: tuple, src: Any, target: Any) -> dict: ...


class CellFont(object):
    LINE_STYLES: tuple = ...
    SCHEMES: tuple = ...
    VERT_ALIGNS: tuple = ...

    def __init__(self):
        self.name: str = ...
        self.charset: int = ...
        self.size: float = ...
        self.bold: bool = ...
        self.italic: bool = ...
        self.strike: bool = ...
        self.outline: bool = ...
        self.shadow: bool = ...
        self.condense: bool = ...
        self.extend: bool = ...
        self.underline: Literal['single', 'double', 'singleAccounting', 'doubleAccounting'] = ...
        self.vertAlign: Literal['superscript', 'subscript', 'baseline'] = ...
        self.color: str = ...
        self.scheme: Literal['major', 'minor'] = ...

    def set_name(self, name: Optional[str]) -> None: ...

    def set_charset(self, charset: Optional[int]) -> None: ...

    def set_size(self, size: Optional[float]) -> None: ...

    def set_bold(self, on_off: Optional[bool]) -> None: ...

    def set_italic(self, on_off: Optional[bool]) -> None: ...

    def set_strike(self, on_off: Optional[bool]) -> None: ...

    def set_outline(self, on_off: Optional[bool]) -> None: ...

    def set_shadow(self, on_off: Optional[bool]) -> None: ...

    def set_condense(self, on_off: Optional[bool]) -> None: ...

    def set_extend(self, on_off: Optional[bool]) -> None: ...

    def set_color(self, color: Optional[str]) -> None: ...

    def set_underline(self,
                      option: Literal['single', 'double', 'singleAccounting', 'doubleAccounting', None]) -> None: ...

    def set_vertAlign(self, option: Literal['superscript', 'subscript', 'baseline', None]) -> None: ...

    def set_scheme(self, option: Literal['major', 'minor', None]) -> None: ...


class CellBorder(object):
    LINE_STYLES: tuple = ...

    def __init__(self):
        self.start: Side = ...
        self.end: Side = ...
        self.left: Side = ...
        self.right: Side = ...
        self.top: Side = ...
        self.bottom: Side = ...
        self.diagonal: Side = ...
        self.vertical: Side = ...
        self.horizontal: Side = ...
        self.horizontal: Side = ...
        self.outline: bool = ...
        self.diagonalUp: bool = ...
        self.diagonalDown: bool = ...

    def set_start(self, style: LINES, color: Optional[str]) -> None: ...

    def set_end(self, style: LINES, color: Optional[str]) -> None: ...

    def set_left(self, style: LINES, color: Optional[str]) -> None: ...

    def set_right(self, style: LINES, color: Optional[str]) -> None: ...

    def set_top(self, style: LINES, color: Optional[str]) -> None: ...

    def set_bottom(self, style: LINES, color: Optional[str]) -> None: ...

    def set_diagonal(self, style: LINES, color: Optional[str]) -> None: ...

    def set_vertical(self, style: LINES, color: Optional[str]) -> None: ...

    def set_horizontal(self, style: LINES, color: Optional[str]) -> None: ...

    def set_outline(self, on_off: bool) -> None: ...

    def set_diagonalDown(self, on_off: bool) -> None: ...

    def set_diagonalUp(self, on_off: bool) -> None: ...


class CellAlignment(object):
    horizontal_alignments: tuple = ...
    vertical_alignments: tuple = ...

    def __init__(self):
        self.horizontal = 'notSet'
        self.vertical = 'notSet'
        self.indent = 'notSet'
        self.relativeIndent = 'notSet'
        self.justifyLastLine = 'notSet'
        self.readingOrder = 'notSet'
        self.textRotation = 'notSet'
        self.wrapText = 'notSet'
        self.shrinkToFit = 'notSet'

    def set_horizontal(self,
                       horizontal: Literal['general', 'left', 'center', 'right', 'fill', 'justify', 'centerContinuous',
                       'distributed', None]) -> None: ...

    def set_vertical(self, vertical: Literal['top', 'center', 'bottom', 'justify', 'distributed', None]) -> None: ...

    def set_indent(self, indent: int) -> None: ...

    def set_relativeIndent(self, indent: int) -> None: ...

    def set_justifyLastLine(self, on_off: Optional[bool]) -> None: ...

    def set_readingOrder(self, value: int) -> None: ...

    def set_textRotation(self, value: int) -> None: ...

    def set_wrapText(self, on_off: Optional[bool]) -> None: ...

    def set_shrinkToFit(self, on_off: Optional[bool]) -> None: ...


class CellGradientFill(object):
    def __init__(self):
        self.type: str = ...
        self.degree: float = ...
        self.left: float = ...
        self.right: float = ...
        self.top: float = ...
        self.bottom: float = ...
        self.stop: Union[list, tuple] = ...

    def set_type(self, name: Literal['linear', 'path']) -> None: ...

    def set_degree(self, value: float) -> None: ...

    def set_left(self, value: float) -> None: ...

    def set_right(self, value: float) -> None: ...

    def set_top(self, value: float) -> None: ...

    def set_bottom(self, value: float) -> None: ...

    def set_stop(self, value: Union[list, tuple]) -> None: ...


class CellPatternFill(object):
    FILES: tuple = ...

    def __init__(self):
        self.patternType: str = ...
        self.fgColor: str = ...
        self.bgColor: str = ...

    def set_patternType(self, name: Literal[
        'none', 'solid', 'darkDown', 'darkGray', 'darkGrid', 'darkHorizontal', 'darkTrellis', 'darkUp',
        'darkVertical', 'gray0625', 'gray125', 'lightDown', 'lightGray', 'lightGrid', 'lightHorizontal',
        'lightTrellis', 'lightUp', 'lightVertical', 'mediumGray', None]) -> None: ...

    def set_fgColor(self, color: Optional[str]) -> None: ...

    def set_bgColor(self, color: Optional[str]) -> None: ...


class CellNumberFormat(object):
    def __init__(self):
        pass


class CellProtection(object):
    def __init__(self):
        self.hidden: bool = ...
        self.locked: bool = ...

    def set_hidden(self, on_off: bool) -> None: ...

    def set_locked(self, on_off: bool) -> None: ...
