# -*- coding:utf-8 -*-
from typing import Literal, Optional

from openpyxl.cell import Cell
from openpyxl.styles import Alignment, Font, Border, Fill, NumberFormatDescriptor, Protection


class CellStyle(object):
    def __init__(self) -> None:
        self._style = ...
        self._font = ...
        self._border = ...
        self._fill = ...
        self._number_format = ...
        self._protection = ...
        self._alignment = ...

    @property
    def font(self) -> CellFont: ...

    def to_cell(self, cell: Cell) -> None: ...


class CellFont(object):
    def __init__(self):
        self.name: str = ...
        self.charset: int = ...
        self.size: float = ...
        self.bold: bool = ...
        self.italic: bool = ...
        self.strike: bool = ...
        self.outline: bool = ...
        self.shadow: bool = ...
        self.condense: bool = ...
        self.extend: bool = ...
        self.underline: Literal['single', 'double', 'singleAccounting', 'doubleAccounting'] = ...
        self.vertAlign: Literal['superscript', 'subscript', 'baseline'] = ...
        self.color: str = ...
        self.scheme: Literal['major', 'minor'] = ...

    def set_name(self, name: Optional[str]) -> None: ...

    def set_charset(self, charset: Optional[int]) -> None: ...

    def set_size(self, size: Optional[float]) -> None: ...

    def set_bold(self, on_off: Optional[bool]) -> None: ...

    def set_italic(self, on_off: Optional[bool]) -> None: ...

    def set_strike(self, on_off: Optional[bool]) -> None: ...

    def set_outline(self, on_off: Optional[bool]) -> None: ...

    def set_shadow(self, on_off: Optional[bool]) -> None: ...

    def set_condense(self, on_off: Optional[bool]) -> None: ...

    def set_extend(self, on_off: Optional[bool]) -> None: ...

    def set_color(self, color: Optional[str]) -> None: ...

    def set_underline(self,
                      option: Literal['single', 'double', 'singleAccounting', 'doubleAccounting', None]) -> None: ...

    def set_vertAlign(self, option: Literal['superscript', 'subscript', 'baseline', None]) -> None: ...

    def set_scheme(self, option: Literal['major', 'minor', None]) -> None: ...
